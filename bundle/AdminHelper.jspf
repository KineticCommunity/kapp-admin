<%@page import="com.kineticdata.core.web.bundles.PaginatedList" %>
<%!
    public static class AdminHelper {
    
        private Bundle adminBundle;
        private Kapp adminKapp;
        private BundleSubmissionComponent submissionComponent;
        
        // Map for storing datastore records
        private Map<String, List<Submission>> datastoreRecords = new HashMap<>();
        
        public AdminHelper(HttpServletRequest request, Kapp kapp, Bundle bundle){
            this.adminKapp = kapp;
            this.adminBundle = bundle;
            this.submissionComponent = (BundleSubmissionComponent)request.getAttribute("Submissions");
        }
        
        public List<Kapp> getActiveKapps(){
            // Get all Admin Consoles
            List<Form> consoles = adminKapp.getFormsByType("Console");
            // Create a set of slugs for all Kapps which have at least 1 associated Sonsole
            Set<String> activeKappSlugs = new HashSet<>();
            for (Form console : consoles){
                activeKappSlugs.addAll(console.getAttributeValues("Kapp Slug"));
            }
            // Creat and return a list of Kapps for each slug found above
            List<Kapp> activeKapps = new ArrayList<>();
            for (Kapp kapp : this.adminKapp.getSpace().getKapps()){
                if (activeKappSlugs.contains(kapp.getSlug())){
                    activeKapps.add(kapp);
                }
            }
            return activeKapps;
        }
        
        public List<Kapp> getActiveKappsForConsole(Form console){
            // Get all Kapps that are associated to the given Sonsole
            List<Kapp> activeKapps = new ArrayList<>();
            for (Kapp kapp : this.adminKapp.getSpace().getKapps()){
                if (console.hasAttributeValue("Kapp Slug", kapp.getSlug())){
                    activeKapps.add(kapp);
                }
            }
            return activeKapps;
        }
    
        public List<Form> getActiveConsoles(){
            // Filter Sonsoles to only those have are active for at least 1 Kapp
            List<Form> activeConsoles = new ArrayList<>();
            for (Form console : adminKapp.getFormsByType("Console")){
                if (console.hasAttribute("Kapp Slug")){
                    activeConsoles.add(console);
                }
            }
            return activeConsoles;
        }
        
        public List<Form> getActiveConsolesForKapp(Kapp kapp){
            // Get all Admin Consoles that are associated to the given Kapp
            List<Form> activeConsoles = new ArrayList<>();
            for (Form console : adminKapp.getFormsByType("Console")){
                if (console.hasAttributeValue("Kapp Slug", kapp.getSlug())){
                    activeConsoles.add(console);
                }
            }
            return activeConsoles;
        }

        public List<HelpLink> getCommunityLinks(Form form){
            // Create container to hold links
            List<HelpLink> communityLinks = new ArrayList<>();
            // Loop over the form's community link attributes
            for ( String json : form.getAttributeValues("Community Link") ){
                // Get value of attribute and parse into JSON
                LinkedHashMap communityLink = (LinkedHashMap)Json.parse(json);
                // Add link to result list
                communityLinks.add(new HelpLink((String)communityLink.get("name"), (String)communityLink.get("url")));
            }
            return communityLinks;
        }

        public List<HelpLink> getFormHelpLinks(Kapp kapp, String consoleSlug){
            // Create container to hold links
            List<HelpLink> formHelpLinks = new ArrayList<>();
            // Loop over the kapp's form
            for ( Form form : this.adminKapp.getFormsByType("Help") ){
                if( form.hasAttributeValue("Kapp Slug",kapp.getSlug()) && form.hasAttributeValue("Console Slug", consoleSlug) ){
                    String path = this.adminBundle.getKappLocation() + "/" + form.getSlug();
                    String name = form.hasAttribute("Display Name") ? form.getAttributeValue("Display Name") : form.getName();
                    formHelpLinks.add(new HelpLink(name, path));
                }
            }
            return formHelpLinks;
        }

        /**
         * Helper class which defines an instance of a help link.
         */
        public class HelpLink {
            private String name;
            private String href;
            
            public HelpLink(String name, String href){
                this.name = name;
                this.href = href;
            }
            
            public String getName(){
                return this.name;
            }
            
            public String getHref(){
                return this.href;
            }
        }
        
        public static List<LinkedHashMap> getDatastoreColumns(Form datastore){
            LinkedHashMap<String, Field> fields = new LinkedHashMap<>();
            for (Page page : datastore.getPages()){
                for (Field field : page.getFields()){
                    fields.put(field.getName(), field);
                }
            }
            
            List<LinkedHashMap> configuration = new ArrayList<>();
            try {
                configuration.addAll((List<LinkedHashMap>)Json.parse(datastore.getAttributeValue("Datastore Configuration")));
            }
            catch (Exception e){/*Ignore bad Json*/}
            
            List<LinkedHashMap> columns = new ArrayList<>();
            for (LinkedHashMap config : configuration){
                if (fields.containsKey(config.get("data"))){
                    fields.remove(config.get("data"));
                    columns.add(config);
                }
            }
            for (Field field : fields.values()){
                LinkedHashMap<String, Object> newColumn = new LinkedHashMap<>();
                newColumn.put("data", field.getName());
                newColumn.put("title", field.getName());
                newColumn.put("visible", true);
                newColumn.put("searchable", true);
                newColumn.put("orderable", true);
                //newColumn.put("unique", false);
                columns.add(newColumn);
            }
            return columns;
        }
        
        public List<Submission> getDatastoreRecords(Form datastore){
            return getDatastoreRecords(datastore, 0, 0, true);
        }
        
        public List<Submission> getDatastoreRecords(Form datastore, boolean refresh){
            return getDatastoreRecords(datastore, 0, 0, refresh);
        }
        
        public List<Submission> getDatastoreRecords(Form datastore, int pageSize, int offset){
            return getDatastoreRecords(datastore, pageSize, offset, false);
        }
        
        public List<Submission> getDatastoreRecords(Form datastore, int pageSize, int offset, boolean refresh){
            // If get from database is requested, or data wasn't previously fetched, get/reload data
            if (refresh || !this.datastoreRecords.containsKey(datastore.getSlug())){
                // Clear current data so we only store records for one datastore at a time
                this.datastoreRecords.clear();
                List<Submission> submissions = new ArrayList<>();
                Map<String, String[]> parameters = maxLimitQueryParameters();
                PaginatedList<Submission> page;
                do {
                    page = this.submissionComponent.searchByForm(datastore, parameters);
                    submissions.addAll(page);
                    parameters.put("pageToken", new String[]{page.getNextPageToken()});
                } 
                while (Text.isNotBlank(page.getNextPageToken()));
                this.datastoreRecords.put(datastore.getSlug(), submissions);
            }
            
            // Get records from Map
            List<Submission> submissions = this.datastoreRecords.get(datastore.getSlug());
            
            // If offset is invalid, set to zero
            if (offset < 0){
                offset = 0;
            }
            // If offset is after the last result, return empty list
            if (offset >= submissions.size()){
                return new ArrayList<Submission>();
            }
            // Set pageEnd initially to end of list
            int pageEnd = submissions.size();
            // If pageSize is valid and offset + pageSize <= size of results list, set new pageEnd
            if (pageSize > 0 && (offset + pageSize) <= submissions.size()){
                pageEnd = offset + pageSize;
            }
            // Return a sublist of Submissions objects stored in submissions List
            return submissions.subList(offset, pageEnd);
        }
        
        private Map<String, String[]> maxLimitQueryParameters() {
            Map<String, String[]> searchOptions = new HashMap<>();
            searchOptions.put("limit", new String[]{"1000"});
            return searchOptions;
        }
        
//         TODO Disallow duplicate submissions        
//         public List<String> getUniqueFields(Form datastore){
//             List<String> uniqueFields = new ArrayList<>();
            
//             List<LinkedHashMap> configuration = getDatastoreColumns(datastore);
//             for (LinkedHashMap config : configuration){
//                 if ((Boolean)config.get("unique")){
//                     uniqueFields.add((String)config.get("data"));
//                 }
//             }
            
//             return uniqueFields;
//         }

    }
%>
