<%@page import="com.google.common.primitives.Ints" %>
<%@page import="com.kineticdata.core.web.bundles.PaginatedList" %>
<%@page import="java.util.regex.Matcher" %>
<%@page import="java.util.regex.Pattern" %>
<%!
    public static class AdminHelper {
    
        private Bundle adminBundle;
        private Space space;
        private Kapp adminKapp;
        private BundleSubmissionComponent submissionComponent;
        private org.slf4j.Logger logger;
        
        // Map for storing datastore records
        private Map<String, List<Submission>> datastoreRecords = new HashMap<>();
                
        /*-----------------------------------------------------------------------------------------
         * GENERAL HELPER FUNCTIONS
         *----------------------------------------------------------------------------------------*/
        
        public AdminHelper(HttpServletRequest request){
            this.adminBundle = (Bundle)request.getAttribute("bundle"); 
            this.space = (Space)request.getAttribute("space");
            this.adminKapp = (Kapp)request.getAttribute("kapp");
            this.submissionComponent = (BundleSubmissionComponent)request.getAttribute("Submissions");
            this.logger = (org.slf4j.Logger)request.getAttribute("logger");
        }
    
        public List<Form> getActiveConsoles(){
            // Filter Consoles to only those with an Active status
            List<Form> activeConsoles = new ArrayList<>();
            for (Form console : adminKapp.getFormsByType("Console")){
                if (Text.equals("Active", console.getStatus())){
                    activeConsoles.add(console);
                }
            }
            return activeConsoles;
        }

        public List<Link> getHelpLinks(Form form){
            // Create container to hold links
            List<Link> helpLinks = new ArrayList<>();
            // Loop over the form's community link attributes
            for ( String json : form.getAttributeValues("Help Link") ){
                // Get value of attribute and parse into JSON
                LinkedHashMap helpLink = (LinkedHashMap)Json.parse(json);
                // Add link to result list
                helpLinks.add(new Link((String)helpLink.get("name"), (String)helpLink.get("url")));
            }
            return helpLinks;
        }

        /**
         * Returns the breadcrumbs for admin consoles defined in forms.
         */
        public List<Link> getFormDefinedConsoleBreadcrumbs(Form form){
            List<Link> breadcrumbs = new ArrayList<Link>();
            if (Text.equals(form.getTypeName(), "Subconsole") 
                    && form.hasAttribute("Parent Console Slug")
                    && this.adminKapp.getForm(form.getAttributeValue("Parent Console Slug")) != null)
            {
                breadcrumbs.addAll(getFormDefinedConsoleBreadcrumbs(this.adminKapp.getForm(form.getAttributeValue("Parent Console Slug"))));
            }
            breadcrumbs.add(new Link(form.getName(), adminBundle.getKappLocation() + "/" + form.getSlug()));
            return breadcrumbs;
        }

        /**
         * Helper class which defines an instance of a link.
         */
        public class Link {
            private String name;
            private String href;
            
            public Link(String name, String href){
                this.name = name;
                this.href = href;
            }
            
            public String getName(){
                return this.name;
            }
            
            public String getHref(){
                return this.href;
            }
        }
        
        /*-----------------------------------------------------------------------------------------
         * DATASTORE CONSOLE HELPER FUNCTIONS
         *----------------------------------------------------------------------------------------*/
        
        public List<LinkedHashMap> getDatastoreColumns(Form datastore, String configurationAttributeName){
            LinkedHashMap<String, Element> fieldElements = new LinkedHashMap<>();
            for (Page page : datastore.getPages()){
                for (Element element : getFieldElements(page.getElements())){
                    fieldElements.put(element.getName(), element);
                }
            }
            
            List<LinkedHashMap> configuration = new ArrayList<>();
            try {
                configuration.addAll((List<LinkedHashMap>)Json.parse(datastore.getAttributeValue(configurationAttributeName)));
            }
            catch (Exception e){/*Ignore bad Json*/}
            
            List<LinkedHashMap> columns = new ArrayList<>();
            for (LinkedHashMap config : configuration){
                // If field is defined in the config attribute
                if (fieldElements.containsKey(config.get("data"))){
                    // Add type of field to the config object
                    config.put("renderType", fieldElements.get(config.get("data")).getRenderType());
                    // Remove the field from the list
                    fieldElements.remove(config.get("data"));
                    // Add config object to columns list
                    columns.add(config);
                }
            }
            // For all fields not in the config attribute, add them to columns list
            for (Element element : fieldElements.values()){
                LinkedHashMap<String, Object> newColumn = new LinkedHashMap<>();
                newColumn.put("data", element.getName());
                newColumn.put("title", element.getName());
                newColumn.put("renderType", element.getRenderType());
                newColumn.put("visible", true);
                newColumn.put("searchable", true);
                newColumn.put("orderable", true);
                newColumn.put("unique", false);
                columns.add(newColumn);
            }
            return columns;
        }
        
        public List<LinkedHashMap> getDatastoreColumnsAlphabetically(Form datastore, String configurationAttributeName){
            List<LinkedHashMap> columns = getDatastoreColumns(datastore, configurationAttributeName);
            // Sort alphabetically by title
            Collections.sort(columns, new Comparator<LinkedHashMap>(){ 
                public int compare(LinkedHashMap one, LinkedHashMap two) { 
                    String titleOne = (String)one.get("title");
                    String titleTwo = (String)two.get("title");
                    return titleOne.compareTo(titleTwo);    
                } 
            });
            return columns;
        }
        
        public PaginatedList<Submission> getDatastoreRecords(Form form, Map<String, String> query, String pageToken){
            Map<String, String[]> parameters = buildQueryParameters(1000, pageToken);
            for (Map.Entry<String, String> q : query.entrySet()){
                parameters.put(q.getKey(), new String[] {q.getValue()});
            }
            PaginatedList<Submission> submissions = getSubmissions(form, parameters, true);
            if (Text.isNotBlank(submissions.getNextPageToken())){
                parameters.put("pageToken", new String[]{submissions.getNextPageToken()});
                PaginatedList<Submission> moreSubmissions = getSubmissions(form, parameters, true);
                submissions.addAll(moreSubmissions);
                submissions.setNextPageToken(moreSubmissions.getNextPageToken());
            }
            return submissions;
        }
        
        public Map<String, String> getQualificationParameterMapWithValues(List<BridgeModelQualificationParameter> parameters, String query){
            Map<String, String> parameterMap = new TreeMap<String, String>();
            for (BridgeModelQualificationParameter parameter : parameters){
                parameterMap.put(parameter.getName(), null);
            }
            for (String queryPart : Text.splitRegex(query, "&(?=[^&]+?=)")){
                Pattern pattern = Pattern.compile("^values\\[(.+?)\\]=(?!\\$\\{)(.+?)$");
                Matcher matcher = pattern.matcher(queryPart);
                if (matcher.find()){
                    parameterMap.put(matcher.group(1), Text.replace(matcher.group(2), "\\\\", "\\"));
                }
                else {
                    Pattern idPattern = Pattern.compile("^id=(?!\\$\\{)(.+?)$");
                    Matcher idMatcher = idPattern.matcher(queryPart);
                    if (idMatcher.find()){
                        parameterMap.put("Submission ID", Text.replace(idMatcher.group(1), "\\\\", "\\"));
                    }
                }
            }
            return parameterMap;
        }
        
        /*-----------------------------------------------------------------------------------------
         * ROBOT CONSOLE HELPER FUNCTIONS
         *----------------------------------------------------------------------------------------*/
        
        public List<LinkedHashMap> getRobotColumns(Form form){
            List<Element> fieldElements = new ArrayList<>();
            for (Page page : form.getPages()){
                for (Element element : getFieldElements(page.getElements())){
                    if (element.getRenderAttributes().get("dt-visible") != null){
                        fieldElements.add(element);
                    }
                }
            }
            
            TreeMap<Integer, List<LinkedHashMap>> orderedColumns = new TreeMap<>();
            for (Element element : fieldElements){
                Map<String,String> renderAttributes = element.getRenderAttributes();
                LinkedHashMap<String, Object> newColumn = new LinkedHashMap<>();
                newColumn.put("data", element.getName());
                newColumn.put("title", element.getName());
                newColumn.put("renderType", element.getRenderType());
                newColumn.put("visible", Text.equals(renderAttributes.get("dt-visible"), "true"));
                newColumn.put("searchable", Text.equals(Text.defaultIfBlank(renderAttributes.get("dt-searchable"), "true"), "true"));
                newColumn.put("orderable", Text.equals(Text.defaultIfBlank(renderAttributes.get("dt-orderable"), "true"), "true"));
                Integer columnOrder = Ints.tryParse(Text.defaultIfBlank(renderAttributes.get("dt-column-order"), String.valueOf(Integer.MAX_VALUE)));
                if (!orderedColumns.containsKey(columnOrder)){
                    orderedColumns.put(columnOrder, new ArrayList<LinkedHashMap>());
                }
                orderedColumns.get(columnOrder).add(newColumn);
            }
            //If executions, add column with no data as default sort for the page, so the data remains sorted by the server
            if (Text.equals(form.getSlug(), "robot-executions")){
                LinkedHashMap<String, Object> newColumn = new LinkedHashMap<>();
                newColumn.put("data", "_empty");
                newColumn.put("title", "");
                newColumn.put("visible", false);
                newColumn.put("searchable", false);
                newColumn.put("orderable", true);
                newColumn.put("defaultOrder", "desc");
                if (!orderedColumns.containsKey(Integer.MAX_VALUE)){
                    orderedColumns.put(Integer.MAX_VALUE, new ArrayList<LinkedHashMap>());
                }
                orderedColumns.get(Integer.MAX_VALUE).add(newColumn); 
            }
            
            List<LinkedHashMap> columns = new ArrayList<>();
            for (List<LinkedHashMap> cols : orderedColumns.values()){
                columns.addAll(cols);       
            }
            return columns;
        }
        
        public PaginatedList<Submission> getRobotDefinitions(){
            Map<String, String[]> parameters = buildQueryParameters();
            return getSubmissions(adminKapp.getForm("robot-definitions"), parameters, false);
        }

        public PaginatedList<Submission> getRobotSchedules(String robotId){
            Map<String, String[]> parameters = buildQueryParameters();
            parameters.put("values[Robot ID]", new String[] {robotId});
            return getSubmissions(adminKapp.getForm("robot-schedules"), parameters, false);
        }
        
        public PaginatedList<Submission> getRobotExecutions(Integer limit, String pageToken, String robotId, String scheduleId){
            Map<String, String[]> parameters = buildQueryParameters(limit, pageToken);
            parameters.put("include", new String[] {"createdAt"});
            parameters.put("values[Robot ID]", new String[] {robotId});
            if (Text.isNotBlank(scheduleId)){
                parameters.put("values[Schedule ID]", new String[] {scheduleId});
            }
            return getSubmissions(adminKapp.getForm("robot-executions"), parameters, true);
        }
        
        /*-----------------------------------------------------------------------------------------
         * TRANSLATIONS CONSOLE HELPER FUNCTIONS
         *----------------------------------------------------------------------------------------*/
        
        /**
         * Sorts the given list of locale codes by the name of the locale and returns a list of codes
         */
        public List<String> sortLocaleCodesByName(Collection<String> localeCodes){
            Map<String, String> locales = new TreeMap<String, String>();
            for (String localeCode : localeCodes){
                locales.put(TranslationLocale.get(localeCode).getName(), localeCode);
            }
            return new ArrayList<String>(locales.values());
        }
        
        /*-----------------------------------------------------------------------------------------
         * GENERIC PRIVATE HELPER FUNCTIONS
         *----------------------------------------------------------------------------------------*/
         
        private Map<String, String[]> buildQueryParameters() {
            return buildQueryParameters(null, null);
        }
        private Map<String, String[]> buildQueryParameters(Integer limit) {
            return buildQueryParameters(limit, null);
        }
        private Map<String, String[]> buildQueryParameters(String pageToken) {
            return buildQueryParameters(null, pageToken);
        }
        private Map<String, String[]> buildQueryParameters(Integer limit, String pageToken) {
            Map<String, String[]> searchOptions = new HashMap<>();
            searchOptions.put("limit", new String[]{limit != null ? String.valueOf(limit) : "1000"});
            if (Text.isNotBlank(pageToken)){
                searchOptions.put("pageToken", new String[]{pageToken});
            }
            return searchOptions;
        }
        
        private PaginatedList<Submission> getSubmissions(Form form, Map<String, String[]> parameters, boolean paginate){
            PaginatedList<Submission> submissions = new PaginatedList<>();
            PaginatedList<Submission> page;
            do {
                page = this.submissionComponent.searchByForm(form, parameters);
                submissions.addAll(page);
                parameters.put("pageToken", new String[]{page.getNextPageToken()});
            } 
            while (!paginate && Text.isNotBlank(page.getNextPageToken()));
            submissions.setNextPageToken(page.getNextPageToken());
            return submissions;
        }
         
        private List<Element> getFieldElements(List<Element> elements){
            List<Element> fieldElements = new ArrayList<Element>();
            for(Element element : elements){
                if (Element.Types.FIELD.equals(element.getType())){
                    fieldElements.add(element);
                }
                else if (Element.Types.SECTION.equals(element.getType())){
                    fieldElements.addAll(getFieldElements(element.getElements()));
                }
            }
            return fieldElements;
        }

         /*-----------------------------------------------------------------------------------------
         * SYSTEM MANAGEMENT CONSOLE HELPER FUNCTIONS
         *----------------------------------------------------------------------------------------*/
        
        /**
         * Gets a list of registered Images and returns them
         */
        public List<LinkedHashMap> getRegisteredImages(){
            Map<String, String[]> parameters = buildQueryParameters();
            PaginatedList<Submission> registeredImageSubmissions = submissionComponent.searchByForm(adminKapp.getForm("registered-images"), parameters);

            List<LinkedHashMap> images = new ArrayList<>();

            for (Submission imageSubmission : registeredImageSubmissions){
                LinkedHashMap image = new LinkedHashMap();
                image.put("name", imageSubmission.getValue("Image Name"));
                image.put("url", imageSubmission.getValue("Image URL"));
                images.add(image);
            }
            
            return images;
        }
    }
%>
