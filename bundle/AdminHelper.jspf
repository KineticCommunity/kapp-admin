<%@page import="com.kineticdata.core.web.bundles.PaginatedList" %>
<%!
    public static class AdminHelper {
    
        private Bundle adminBundle;
        private Space space;
        private Kapp adminKapp;
        private BundleSubmissionComponent submissionComponent;
        
        // Map for storing datastore records
        private Map<String, List<Submission>> datastoreRecords = new HashMap<>();
                
        /*-----------------------------------------------------------------------------------------
         * GENERAL HELPER FUNCTIONS
         *----------------------------------------------------------------------------------------*/
        
        public AdminHelper(HttpServletRequest request){
            this.adminBundle = (Bundle)request.getAttribute("bundle"); 
            this.space = (Space)request.getAttribute("space");
            this.adminKapp = (Kapp)request.getAttribute("kapp");
            this.submissionComponent = (BundleSubmissionComponent)request.getAttribute("Submissions");
        }
    
        public List<Form> getActiveConsoles(){
            // Filter Consoles to only those with an Active status
            List<Form> activeConsoles = new ArrayList<>();
            for (Form console : adminKapp.getFormsByType("Console")){
                if (Text.equals("Active", console.getStatus())){
                    activeConsoles.add(console);
                }
            }
            return activeConsoles;
        }

        public List<Link> getHelpLinks(Form form){
            // Create container to hold links
            List<Link> helpLinks = new ArrayList<>();
            // Loop over the form's community link attributes
            for ( String json : form.getAttributeValues("Help Link") ){
                // Get value of attribute and parse into JSON
                LinkedHashMap helpLink = (LinkedHashMap)Json.parse(json);
                // Add link to result list
                helpLinks.add(new Link((String)helpLink.get("name"), (String)helpLink.get("url")));
            }
            return helpLinks;
        }

        /**
         * Returns the breadcrumbs for admin consoles defined in forms.
         */
        public List<Link> getFormDefinedConsoleBreadcrumbs(Form form){
            List<Link> breadcrumbs = new ArrayList<Link>();
            if (Text.equals(form.getTypeName(), "Subconsole") 
                    && form.hasAttribute("Parent Console Slug")
                    && this.adminKapp.getForm(form.getAttributeValue("Parent Console Slug")) != null)
            {
                breadcrumbs.addAll(getFormDefinedConsoleBreadcrumbs(this.adminKapp.getForm(form.getAttributeValue("Parent Console Slug"))));
            }
            breadcrumbs.add(new Link(form.getName(), adminBundle.getKappLocation() + "/" + form.getSlug()));
            return breadcrumbs;
        }

        /**
         * Helper class which defines an instance of a link.
         */
        public class Link {
            private String name;
            private String href;
            
            public Link(String name, String href){
                this.name = name;
                this.href = href;
            }
            
            public String getName(){
                return this.name;
            }
            
            public String getHref(){
                return this.href;
            }
        }
        
        /*-----------------------------------------------------------------------------------------
         * DATASTORE CONSOLE HELPER FUNCTIONS
         *----------------------------------------------------------------------------------------*/
        
        public static List<LinkedHashMap> getDatastoreColumns(Form datastore, String configurationAttributeName){
            LinkedHashMap<String, Element> fieldElements = new LinkedHashMap<>();
            for (Page page : datastore.getPages()){
                for (Element element : getFieldElements(page.getElements())){
                    fieldElements.put(element.getName(), element);
                }
            }
            
            List<LinkedHashMap> configuration = new ArrayList<>();
            try {
                configuration.addAll((List<LinkedHashMap>)Json.parse(datastore.getAttributeValue(configurationAttributeName)));
            }
            catch (Exception e){/*Ignore bad Json*/}
            
            List<LinkedHashMap> columns = new ArrayList<>();
            for (LinkedHashMap config : configuration){
                // If field is defined in the config attribute
                if (fieldElements.containsKey(config.get("data"))){
                    // Add type of field to the config object
                    config.put("renderType", fieldElements.get(config.get("data")).getRenderType());
                    // Remove the field from the list
                    fieldElements.remove(config.get("data"));
                    // Add config object to columns list
                    columns.add(config);
                }
            }
            // For all fields not in the config attribute, add them to columns list
            for (Element element : fieldElements.values()){
                LinkedHashMap<String, Object> newColumn = new LinkedHashMap<>();
                newColumn.put("data", element.getName());
                newColumn.put("title", element.getName());
                newColumn.put("renderType", element.getRenderType());
                newColumn.put("visible", true);
                newColumn.put("searchable", true);
                newColumn.put("orderable", true);
                newColumn.put("unique", false);
                columns.add(newColumn);
            }
            return columns;
        }
        
        private static List<Element> getFieldElements(List<Element> elements){
            List<Element> fieldElements = new ArrayList<Element>();
            for(Element element : elements){
                if (Element.Types.FIELD.equals(element.getType())){
                    fieldElements.add(element);
                }
                else if (Element.Types.SECTION.equals(element.getType())){
                    fieldElements.addAll(getFieldElements(element.getElements()));
                }
            }
            return fieldElements;
        }
        
        public List<Submission> getDatastoreRecords(Form datastore){
            return getDatastoreRecords(datastore, 0, 0, true);
        }
        
        public List<Submission> getDatastoreRecords(Form datastore, boolean refresh){
            return getDatastoreRecords(datastore, 0, 0, refresh);
        }
        
        public List<Submission> getDatastoreRecords(Form datastore, int pageSize, int offset){
            return getDatastoreRecords(datastore, pageSize, offset, false);
        }
        
        public List<Submission> getDatastoreRecords(Form datastore, int pageSize, int offset, boolean refresh){
            // If get from database is requested, or data wasn't previously fetched, get/reload data
            if (refresh || !this.datastoreRecords.containsKey(datastore.getSlug())){
                // Clear current data so we only store records for one datastore at a time
                this.datastoreRecords.clear();
                List<Submission> submissions = new ArrayList<>();
                Map<String, String[]> parameters = maxLimitQueryParameters();
                PaginatedList<Submission> page;
                do {
                    page = this.submissionComponent.searchByForm(datastore, parameters);
                    submissions.addAll(page);
                    parameters.put("pageToken", new String[]{page.getNextPageToken()});
                } 
                while (Text.isNotBlank(page.getNextPageToken()));
                this.datastoreRecords.put(datastore.getSlug(), submissions);
            }
            
            // Get records from Map
            List<Submission> submissions = this.datastoreRecords.get(datastore.getSlug());
            
            // If offset is invalid, set to zero
            if (offset < 0){
                offset = 0;
            }
            // If offset is after the last result, return empty list
            if (offset >= submissions.size()){
                return new ArrayList<Submission>();
            }
            // Set pageEnd initially to end of list
            int pageEnd = submissions.size();
            // If pageSize is valid and offset + pageSize <= size of results list, set new pageEnd
            if (pageSize > 0 && (offset + pageSize) <= submissions.size()){
                pageEnd = offset + pageSize;
            }
            // Return a sublist of Submissions objects stored in submissions List
            return submissions.subList(offset, pageEnd);
        }
        
        private Map<String, String[]> maxLimitQueryParameters() {
            Map<String, String[]> searchOptions = new HashMap<>();
            searchOptions.put("limit", new String[]{"1000"});
            return searchOptions;
        }
        
        
        /*-----------------------------------------------------------------------------------------
         * TRANSLATIONS CONSOLE HELPER FUNCTIONS
         *----------------------------------------------------------------------------------------*/
        
        /**
         * Sorts the given list of locale codes by the name of the locale and returns a list of codes
         */
        public List<String> sortLocaleCodesByName(Collection<String> localeCodes){
            Map<String, String> locales = new TreeMap<String, String>();
            for (String localeCode : localeCodes){
                locales.put(TranslationLocale.get(localeCode).getName(), localeCode);
            }
            return new ArrayList<String>(locales.values());
        }
    }
%>
