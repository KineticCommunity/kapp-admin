<%@page import="com.google.common.collect.Lists"%>
<%@page import="com.google.common.base.Function"%>
<%@page import="com.kineticdata.bundles.Text"%>
<%@page import="com.kineticdata.core.authentication.Identity"%>
<%@page import="com.kineticdata.core.i18n.translations.*"%>
<%@page import="com.kineticdata.core.models.*"%>
<%@page import="com.kineticdata.core.web.bundles.Bundle"%>
<%@page import="java.time.*"%>
<%@page import="java.util.*"%>
<%!
    public static class I18nHelper {
    
        /*------------------------------------------------------------------------------------------
         * CONSTRUCTOR
         *----------------------------------------------------------------------------------------*/
        
        private Bundle bundle;
        private Kapp kapp;
        
        public I18nHelper(HttpServletRequest request) throws Exception {
            this(request, Locale.getDefault());
        }
        
        public I18nHelper(HttpServletRequest request, Locale defaultLocale) throws Exception {
            // Set the bundle
            this.bundle = (Bundle)request.getAttribute("bundle");
            
            // Determine the prefered locale of the user
            Identity identity = (Identity)request.getAttribute("identity");
            String preferredLocale = (identity == null || identity.getUser() == null) 
                ? null 
                : identity.getUser().getPreferredLocale();
            
            
            // Obtain a reference to the kapp
            this.kapp = (Kapp)request.getAttribute("kapp");
            // If the kapp is not set on the request (indicating this is a request to render the space page)
            if (this.kapp == null) {
                // Obtain a reference to the space
                Space space = (Space)request.getAttribute("space");
                // If the space has an admin kapp specified
                if (space.hasAttribute("Admin Kapp Slug") 
                        && space.getKapp(space.getAttributeValue("Admin Kapp Slug")) != null){
                    // Set the kapp to the admin kapp
                    this.kapp = space.getKapp(space.getAttributeValue("Admin Kapp Slug"));
                }
            }
        }
        
        /*------------------------------------------------------------------------------------------
         * METHODS
         *----------------------------------------------------------------------------------------*/
         
        public List<Locale> getEnabledLocales() {
            return Collections.EMPTY_LIST;
        }
        
        public List<Locale> getEnabledLocales(Kapp kapp) {
            return Collections.EMPTY_LIST;
        }
        
        public Locale getLocale() {
            return Locale.getDefault();
        }
        
        public String getLocaleCode(Locale locale) {
            String result;
            if (!"".equals(locale.getVariant())) {
                result = locale.getLanguage() 
                    + "_" + locale.getCountry()
                    + "_" + locale.getVariant();
            } else if (!"".equals(locale.getCountry())) {
                result = locale.getLanguage() 
                    + "_" + locale.getCountry();
            } else if (!"".equals(locale.getLanguage())) {
                result = locale.getLanguage();
            } else {
                result = "";
            }
            return result;
        }
        
        public String getLocaleNameGlobalized(Locale locale) {
            return locale.getDisplayName(locale);
        }

        public String getLocaleNameLocalized(Locale locale, Locale inLocale) {
            return locale.getDisplayName((inLocale == null) ? Locale.getDefault() : inLocale);
        }
        
        public List<Locale> getSystemLocales() {
            return getSystemLocales(null, Collections.EMPTY_LIST);
        }
        
        public List<Locale> getSystemLocales(Collection<Locale> preferredLocales) {
            return getSystemLocales(null, preferredLocales);
        }
        
        public List<Locale> getSystemLocales(Enumeration<Locale> preferredLocales) {
            return getSystemLocales(null, Collections.list(preferredLocales));
        }

        public List<Locale> getSystemLocales(Locale locale) {
            return getSystemLocales(locale, Collections.EMPTY_LIST);
        }

        public List<Locale> getSystemLocales(Locale locale, Enumeration<Locale> preferredLocales) {
            return getSystemLocales(locale, Collections.list(preferredLocales));
        }
        
        public List<Locale> getSystemLocales(Locale locale, Collection<Locale> preferredLocales) {
            List<Locale> results = new ArrayList<>();
            for (Locale currentLocale : Locale.getAvailableLocales()) {
                if (!Locale.ROOT.equals(currentLocale)) {
                    results.add(currentLocale);
                }
            }
            Collections.sort(results, new LocaleComparator(locale, preferredLocales));
            return results;
        }
        
        public ZoneId getZoneId() {
            return ZoneId.systemDefault();
        }
        
        /*------------------------------------------------------------------------------------------
         * SCRIPT PATH METHODS
         *----------------------------------------------------------------------------------------*/
        
        /**
         * This method is necessary to wrap ${i18n.scriptPath('...')} calls in the layout.jsp (which
         * may be used to display a space that does not have the Admin kapp, and subsequently 
         * the scriptPath(String ...) calls would error).
         */
        public boolean hasTranslationJs() {
            // Kapp will not be null if the Admin Kapp is installed and configured for my space (the
            // Admin Kapp translations are what is used to apply space display translations)
            return false;
        }
        
        public String scriptPath(Form form) {
            return "";
        }
        
        public String scriptPath(String contextName) {
            return "";
        }
        
        /*------------------------------------------------------------------------------------------
         * TRANSLATION METHODS
         *----------------------------------------------------------------------------------------*/
        
        public String translate(String key) {
            return key;
        }
        
        public String translate(String key, Map<String,String> substitutions) {
            return key;
        }
        
        public String translate(Form form, String key) {
            return key;
        }
        
        public String translate(Form form, String key, Map<String,String> substitutions) {
            return key;
        }
        
        public String translate(String contextName, String key) {
            return key;
        }
        
        public String translate(String contextName, String key, Map<String,String> substitutions) {
            return key;
        }
        
        
        /*----------------------------------------------------------------------------------------------
         * HELPER CLASSES
         *--------------------------------------------------------------------------------------------*/
    
        public static class LocaleComparator implements Comparator<Locale> {
            private final Locale locale;
            private final Map<Locale,Integer> preferredLocales;
            public LocaleComparator() {
                this(null, Collections.EMPTY_LIST);
            }
            public LocaleComparator(Locale locale) {
                this(locale, Collections.EMPTY_LIST);
            }
            public LocaleComparator(Locale locale, Collection<Locale> preferredLocales) {
                // Initialize the locale variables
                this.locale = locale;
                this.preferredLocales = new HashMap<>();
                // Populate the preferred locales
                if (preferredLocales != null) {
                    Iterator<Locale> iterator = preferredLocales.iterator();
                    int i=0;
                    while (iterator.hasNext()) {
                        this.preferredLocales.put(iterator.next(), i++);
                    }
                }
            }
            @Override
            public int compare(Locale o1, Locale o2) {
                int result;
                Integer o1Weight = preferredLocales.get(o1);
                Integer o2Weight = preferredLocales.get(o2);
                if (o1 == o2) {
                    result = 0;
                } else if (o1Weight != null && o2Weight != null) {
                    result = o1Weight.compareTo(o2Weight);
                } else if (o1Weight != null) {
                    result = -1;
                } else if (o2Weight != null) {
                    result = 1;
                } else {
                    result = String.CASE_INSENSITIVE_ORDER.compare(
                        o1.getDisplayName(locale == null ? o1 : Locale.getDefault()), 
                        o2.getDisplayName(locale == null ? o2 : Locale.getDefault()));
                }
                return result;
            }
        }
        
    }
%>